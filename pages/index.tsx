import { NextPage } from "next";
import Image from "next/image";
import Head from "next/head";

import {
  getAllProduct,
  getCategory,
  getInCategory,
  getDetailProduct,
} from "@/src/api";
import { useEffect, useState, useRef } from "react";
import { FiSearch, FiFilter } from "react-icons/fi";
import { AiOutlineInfoCircle, AiOutlineCloseCircle } from "react-icons/ai";
import { BsCartPlus } from "react-icons/bs";
import {
  Card,
  CardBody,
  CardFooter,
  Typography,
  Button,
  Alert,
} from "@material-tailwind/react";
import StarRating from "@/components/StarRating";
import {
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Skeleton,
} from "@mui/material";
import { useCart } from "../context/CartContext";
import ScrollTopButton from "@/components/ScrollTopButton";
import CarouselItem from "@/components/CarouselItem";

interface Product {
  id: number;
  name: string;
  price: number;
  image: any;
  quantity: number;
}
const Index: NextPage = () => {
  const { addToCart } = useCart();

  const handleAddToCart = (item: Product) => {
    addToCart(item);
    console.log(item, "item cart");
  };

  const [dataCategory, setDataCategory] = useState("");
  const [dataProduct, setDataProduct] = useState("");
  const [dataDetailProduct, setDataDetailProduct] = useState<any>(null);
  const [showAlert, setShowAlert] = useState(false);
  const [collapsed, setCollapsed] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [isModalOpen, setModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  const myRef = useRef<HTMLDivElement>(null);
  const myRefProduct = useRef<HTMLDivElement>(null);
  useEffect(() => {
    if (collapsed && myRef.current) {
      myRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [collapsed]);
  const toggleCollapse = () => {
    setCollapsed((prevCollapsed) => !prevCollapsed);
  };

  const resetCategory = () => {
    setIsLoading(true);
    getAllProduct((data: any) => {
      setDataProduct(data);
      setTimeout(() => {
        setIsLoading(false);
      }, 1000);
    });
  };

  const closeCategory = () => {
    setCollapsed(false);
  };

  const openModalDetail = async (id: string) => {
    setModalOpen(true);
    try {
      const data: any = await getDetailProduct(id);
      setDataDetailProduct(data.data);
    } catch (error) {
      console.error("Error fetching detail product:", error);
    }
  };

  const closeModal = () => {
    setModalOpen(false);
  };

  const handleSearchChange = (e: string) => {
    setSearchText(e);
  };
  const electronics = "/electronics.png";
  const jewelry = "/jewelry.png";
  const men = "/boy.png";
  const girl = "/girl.png";

  const dataCategoryImage = [
    { image: electronics },
    { image: jewelry },
    { image: men },
    { image: girl },
  ];

  const dataKupon = [
    { title: "Kupon  Pelanggan Baru", diskon: "50%", value: "PB50" },
    { title: "Promo Akhir Bulan - Pasti Ada", diskon: "40%", value: "AB-PA40" },
    { title: "Pakai Paylater Dong", diskon: "70%", value: "PP70" },
    { title: "Pelanggan Baru Khusus Jewelry", diskon: "20%", value: "PBJ20" },
    {
      title: "Pelanggan BaruKhusus Electronics",
      diskon: "20%",
      value: "PBE20",
    },
    { title: "Pelanggan Baru Khusus Pakaian", diskon: "50%", value: "PBP50" },
  ];

  interface ResponseType {
    status: number;
    data: any;
  }

  const dataPerCategory = (category: string) => {
    if (myRefProduct.current) {
      const offset =
        myRefProduct.current.getBoundingClientRect().top + window.scrollY;
      window.scrollTo({
        top: offset - 130,
        behavior: "smooth",
      });
    }
    setIsLoading(true);

    getInCategory(category, async (response: ResponseType) => {
      console.log(response, "data kirim");
      try {
        const updatedData: any = response;
        setDataProduct(updatedData);
        setTimeout(() => {
          setIsLoading(false);
        }, 1000);
      } catch (error) {
        console.error("Error while updating data:", error);
      }
    });
  };

  useEffect(() => {
    setIsLoading(true);
    getAllProduct((data: any) => {
      setDataProduct(data);
      setTimeout(() => {
        setIsLoading(false);
      }, 1000);
    });

    getCategory((data: any) => {
      setDataCategory(data);
    });
  }, []);

  const copyToClipboard = (value: string) => {
    const tempInput = document.createElement("input");
    tempInput.value = value;
    document.body.appendChild(tempInput);
    tempInput.select();
    document.execCommand("copy");
    document.body.removeChild(tempInput);

    setShowAlert(true);

    setTimeout(() => {
      setShowAlert(false);
    }, 2000);
  };

  return (
    <div className="font-[Poppins">
      {/* <NavbarItem /> */}
      <Head>
        <title>YugShop</title>
        <meta name="description" content="Generated by Create Next Stack." />
      </Head>

      <div className="flex items-center justify-center mx-4 py-28">
        <div className="relative w-96 flex items-center mt-4">
          <input
            type="text"
            className="border border-gray-400 py-2 px-4 pr-20 rounded-md focus:outline-none w-full"
            placeholder="Cari di YugShop"
            onChange={(e) => handleSearchChange(e.target.value)}
          />
          <button className="absolute right-0 top-2 mt-1 mr-2">
            <FiSearch />
          </button>
        </div>

        <div
          className="flex ml-4 p-2 mt-4 w-32 bg-slate-300 cursor-pointer hover:bg-greenShop hover:text-white  font-bold border border-slate-600 rounded-md items-center justify-center"
          onClick={toggleCollapse}
        >
          <button className="text-lg md:text-xl ml-1 mr-1">
            <FiFilter />
          </button>
          <span className="text-sm md:text-base mb-1">Category</span>
        </div>
      </div>

      <div
        className="p-8 -mt-24 rounded-lg"
        style={{
          backgroundImage: `url('/blurry.png')`,
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      >
        <CarouselItem />
      </div>

      <div
        className="shadow-md rounded-xl mt-8 mx-4"
        style={{
          backgroundImage: `url('/blurry.png')`,
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      >
        <h2 className="font-bold mt-2 p-2">Pakai Voucher Makin Untung</h2>
        <div className="flex flex-col md:flex-row rounded-lg items-center">
          {Array.isArray(dataKupon) && dataKupon.length > 0 ? (
            dataKupon.map((item, i) => {
              return (
                <div
                  key={i}
                  className="text-black justify-center gap-4 text-sm p-4 w-full md:w-auto"
                >
                  {isLoading ? (
                    <Skeleton
                      variant="rounded"
                      className="w-full h-24 md:w-48"
                    />
                  ) : (
                    <div className="bg-slate-300 p-2 border border-neutral-300 rounded-md shadow-md">
                      <h2>{item.title}</h2>
                      <h2>Cashback s/d {item.diskon}</h2>

                      <input
                        className="bg-greenShop text-white w-full mt-1 rounded-lg text-center"
                        type="text"
                        value={item.value}
                        readOnly
                      />
                      <button
                        className="text-blue-500 w-full mt-1 rounded-lg"
                        onClick={() => copyToClipboard(item.value)}
                      >
                        Salin
                      </button>
                    </div>
                  )}
                </div>
              );
            })
          ) : (
            <span>No data available</span>
          )}
        </div>
      </div>

      <div ref={myRef}>
        {collapsed && (
          <div
            className=" shadow-md rounded-xl mt-4  mx-4"
            style={{
              backgroundImage: `url('/blurry.png')`,
              backgroundSize: "cover",
              backgroundPosition: "center",
            }}
          >
            <h2 className="text-center font-bold p-2">Category</h2>
            <div
              className="flex text-slate-500 items-center justify-end cursor-pointer mr-4 text-md hover:text-red-500"
              onClick={closeCategory}
            >
              Close
            </div>

            <div className="flex flex-wrap mt-6 gap-4 mb-4 justify-center">
              {Array.isArray(dataCategory) && dataCategory.length > 0 ? (
                dataCategory.map((item, i) => (
                  <Card
                    onClick={() => dataPerCategory(item)}
                    key={i}
                    className="mb-4 border border-gray-300 rounded-lg flex flex-col w-[300px] cursor-pointer hover:scale-105 hover:shadow-none focus:scale-105 focus:shadow-none active:scale-100"
                  >
                    <CardBody>
                      <Image
                        src={dataCategoryImage[i].image}
                        alt={dataCategoryImage[i].image}
                        width={200}
                        height={200}
                        className="mx-auto "
                      />
                      <Typography
                        variant="h5"
                        color="blue-gray"
                        className="mb-2 capitalize text-md font-semibold text-center"
                      >
                        {item}
                      </Typography>
                    </CardBody>
                  </Card>
                ))
              ) : (
                <span>No data available</span>
              )}

              <div
                className="text-slate-500 bottom-0 font-bold cursor-pointer hover:text-red-500 p-2"
                onClick={resetCategory}
              >
                Reset Category
              </div>
            </div>
          </div>
        )}
      </div>

      <div
        ref={myRefProduct}
        className=" shadow-md rounded-xl mt-4  mx-4"
        style={{
          backgroundImage: `url('/blurry.png')`,
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      >
        <h2 className="text-center font-bold p-2">Products</h2>
        <div className="flex flex-wrap mt-6 gap-4 mb-6 p-4 justify-center">
          {Array.isArray(dataProduct) && dataProduct.length > 0 ? (
            dataProduct
              .filter((item) =>
                item.title.toLowerCase().includes(searchText.toLowerCase())
              )
              .map((item, i) => (
                <Card
                  key={i}
                  className="border  bg-white border-gray-300 rounded-lg flex flex-col justify-between w-[300px] p-2 hover:scale-105 hover:shadow-none focus:scale-105 focus:shadow-none active:scale-100"
                >
                  <CardBody className="flex flex-col justify-center items-center">
                    {isLoading ? (
                      <Skeleton variant="rounded" width={250} height={80} />
                    ) : (
                      <Image
                        src={item.image}
                        alt={item.image}
                        width={120}
                        height={100}
                        className="mx-auto p-4"
                      />
                    )}
                    {isLoading ? (
                      <Skeleton
                        variant="rounded"
                        width={250}
                        height={50}
                        className="mt-2"
                      />
                    ) : (
                      <>
                        <Typography
                          variant="h5"
                          color="blue-gray"
                          className="p-4 capitalize text-sm font-semibold text-center "
                        >
                          {item.title}
                        </Typography>
                        <Typography
                          variant="h5"
                          color="blue-gray"
                          className="mb-2 capitalize text-sm font-semibold text-center"
                        >
                          Category : {item.category}
                        </Typography>
                        <Typography
                          variant="h5"
                          color="blue-gray"
                          className="mb-2 capitalize text-sm font-semibold text-center"
                        >
                          Price : $ {item.price}
                        </Typography>
                        <StarRating rating={item.rating.rate} />
                        <Typography
                          variant="h5"
                          color="blue-gray"
                          className="mb-2 capitalize text-sm font-semibold text-center"
                        >
                          {item.rating.rate}
                        </Typography>
                      </>
                    )}
                  </CardBody>

                  {isLoading ? (
                    <Skeleton animation="wave" variant="rounded" />
                  ) : (
                    <CardFooter className="flex justify-between items-end gap-2">
                      <Button
                        onClick={() => openModalDetail(item.id)}
                        className="whitespace-nowrap text-sm font-thin bg-blue-500 text-white w-40 h-10  flex items-center justify-center hover:scale-105 hover:shadow-none focus:scale-105 focus:shadow-none active:scale-100"
                      >
                        <AiOutlineInfoCircle className="mr-1 text-lg" />
                        Detail Product
                      </Button>
                      <Button
                        onClick={() =>
                          handleAddToCart({
                            id: item.id,
                            name: item.title,
                            price: item.price,
                            image: item.image,
                            quantity: 0,
                          })
                        }
                        className="whitespace-nowrap bg-green-500 font-thin text-sm w-40 h-10 text-white shadow flex items-center justify-center hover:scale-105 hover:shadow-none focus:scale-105 focus:shadow-none active:scale-100"
                      >
                        <BsCartPlus className="mr-1 text-lg" /> Add to Cart
                      </Button>
                    </CardFooter>
                  )}
                </Card>
              ))
          ) : (
            <span>No data available</span>
          )}
        </div>
      </div>

      <div className="font-[Poppins]">
        <Dialog
          open={isModalOpen}
          onClose={closeModal}
          fullWidth
          maxWidth="sm"
          className="font-[Poppins]"
        >
          {dataDetailProduct !== null ? (
            <div>
              <DialogTitle className="text-xl font-bold text-center">
                Title {dataDetailProduct.title}
              </DialogTitle>
              <DialogContent className="flex flex-col items-center gap-2">
                <Image
                  src={dataDetailProduct.image}
                  alt="img"
                  height={100}
                  width={100}
                />
                <StarRating rating={dataDetailProduct.rating.rate} />
                {dataDetailProduct.rating.rate}
              </DialogContent>
              <DialogContent className="text-center font-bold text-red-500">
                Price: $ {dataDetailProduct.price}
              </DialogContent>
              <DialogContent>
                <span className="font-bold"> Product Name :</span>{" "}
                {dataDetailProduct.title}
              </DialogContent>
              <DialogContent className="capitalize py-2">
                <span className="font-bold">Category Product: </span>{" "}
                {dataDetailProduct.category}
              </DialogContent>
              <DialogContent className="italic">
                <span className="font-bold not-italic"> Description : </span>{" "}
                {dataDetailProduct.description}
              </DialogContent>
            </div>
          ) : (
            <p>Loading...</p>
          )}

          <DialogActions>
            <Button
              onClick={closeModal}
              className="bg-greenShop text-white w-32"
            >
              Close
            </Button>
          </DialogActions>
        </Dialog>
      </div>
      <footer className="bg-greenShop text-white py-4 bottom-0 left-0 w-full">
        <div className="container mx-auto text-center">
          <p>&copy; 2023. Created By : Yuggy Saputra</p>
          <p>Built using Next Js & Tailwind</p>
        </div>
      </footer>
      {showAlert && (
        <div className="fixed bottom-0 left-1/2 transform -translate-x-1/2 z-10 w-64 border border-white bg-slate-500 text-white rounded-lg text-center p-2">
          <Alert variant="gradient">
            <span>Kode Promo Tersalin.</span>
          </Alert>
        </div>
      )}
      <ScrollTopButton />
    </div>
  );
};

export default Index;
